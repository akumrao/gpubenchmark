# gpu benchmark tools.

## APP for benchmark of G ChipSet with OpenGL .

## Shadder and GL Load. 

## You can run test case per your duration.

## Statistics collection of Test with tuning clock frequency, FPS, Frame time, latency and gpu memory.



# To install apk

adb shell settings put global verifier_verify_adb_installs 0

adb install gpuload***.apk

adb  root

adb shell setenforce 0



# To copy binary gpucmd to android device

adb push gpucmd  /data/local/tmp/



# To Test

adb root 

adb shell 


cd /data/local/tmp/


./gpucmd 0 20  tiles 

./gpucmd 0 20  stress 

./gpucmd 0 20  tiles stress  


./gpucmd 0 20  tiles stress  

./gpucmd 0 20 stress throttle tiles shader power


# Source Path

https://gchips-internal-review.git.corp.google.com/admin/repos/pdte-slt/test_content



# Install Android Studio 

check java version 

java --version  openjdk 17.0.xxxxxxx 

open project 
/usr/local/google/home/aumrao/google/test_content/GPU/gpubenchmark
 
sync it and build it 


## Steps to run 

Press Fire button


What we have done

1. json for configuration of submodule gpu, cpu etc 

/storage/emulated/0/Android/data/org.gpu.glload.debug/files/config.json

2. Json for statistics of GPU  

/storage/emulated/0/Android/data/org.gpu.glload.debug/files/refract.json

3. Saving Test results of test in file result.txt file,  for all the submodules 

4. Display history of test results 

5. Display of Statistics, it could be enable or disabled from json file   

6. Logging statistic parameters at  at /storage/emulated/0/Android/data/org.gpu.glload.debug/files

7. Streaming statistic to remote udp server


# Open Source code we have used

1. glad Vulkan/GL/GLES/EGL/GLX/WGL Loader-Generator
2. libmatrix  libpng
3. Most of GPU load are from Net
4. nlohmann/json


# What test cases it covers.
1. GPU load
2. Throttling  of GPU
3. Stress load to GPU 
4. GPU usage to 100 %, temperature goes to 46 %c,  gpu clock goes to maximum
5. All the tests passed except one. 
  



# Code Structure 

Manifest for APP permission 

Java Activity and list view for GUI and Dialog box

Load are stored in Assets in the format of  Model,  Shaders & Texture. Load becomes part of APK. All the GPU loads are from Net which are freely available in other benchmark tools.  

Java for APP and GUI. Dialog box for load listing, load options and test results  

Java for rendering 

JNI Layer ( communicating with C APIs)

C/C++ Canvas, Scenes & Model, Terrains   


 1. Manifest  App device permission and API ID. Event, Activitfy and Frame ids

 2. java  
    Dialog boxes 
    Main Activity
    JNI Layer ( communicating with C APIs)
    

 3. Cpp 
    glad
    gpu
    canvas 
    benchmarker test
    scene*.cpp 
    libmatrix 
    mediaserver
    scene-ideas
    scene-terrain
    

4. Android.mk 


5. Assets 
   Model 
   Shaders
   Texture 

6. grade scripts




##Tool Chain and Compiler

NDK 25

Compiler clang 17.02

SDK 33

Java and Javac  version 17

MakeFile for C++ Android.mk 

Build script gradle 



## openGL and Hardware error

OPenGL Computation and OpenGL rendering error.  Mali and Img Tech. specific device drivers errors are not the scope of this document.
OUT_OF_MEMORY: GPU Memory consumptions are not under control.
CONTEXT_LOST: Context has been lost and reset by the drive
INVALID_ENUM: enum argument out of range
INVALID_VALUE: Numeric argument out of range
INVALID_OPERATION: Operation illegal in current state 
INVALID_- FRAMEBUFFER_- OPERATION Framebuffer object is not complete.
Not enough memory.
STACK_OVERFLOW:  Stack overflow


Readme

GPU hardware errors
cat /proc/pvr/status 

Device ID: 0:128
Firmware Status: OK
Server Errors:   20
HWR Event Count: 0
CRR Event Count: 0
SLR Event Count: 0
WGP Error Count: 0
TRP Error Count: 0
FWF Event Count: 0
APM Event Count: 5025


GPU Utilisation: 6%

DM Utilisation:  VM0  VM1
          TDM:   0%   0% 
         GEOM:   1%   0% 
           3D:   4%   0% 
          CDM:   0%   0% 
          RAY:   0%   0% 
        GEOM2:   0%   0% 
